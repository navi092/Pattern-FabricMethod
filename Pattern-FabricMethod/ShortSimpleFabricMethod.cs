using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Pattern_FabricMethod
{
    class ShortSimpleFabricMethod
    {
    }
    /// <summary>
    /// Создатель (обобщенный создатель)
    /// интерфейс или абстрактный класс, который определяет
    /// сигнатуру фабричного метода для создания продуктов
    /// Он должен возвращать обобщенный продукт.
    /// Данный класс один и общий для всех конкретных создателей
    /// </summary>
    public abstract class Creator
    {
        /// <summary>
        /// Фабричный метод определяющий сигнатуру метода создания продукта
        /// При желании может содержать реализацию по умолчанию (если это класс, а не интерфейс)
        /// </summary>
        /// <returns>Обобщенный продукт</returns>
        public abstract IProduct FactoryMethod();
        // Данный класс может содержать дополнительную логику для всех конкретных создателей при необходимости
    }
    /// <summary>
    ///  Создатель (Конкретный создатель)
    ///  Класс конкретного создателя, конкретного продукта, который реализует фабричный метод.
    ///  Для каждого продукта необходи свой создатель. Конкретных создателей может быть много.
    ///  
    /// </summary>
    public class ConcreteCreator : Creator
    {
        /// <summary>
        /// Конкретная реализация конкретного метода.
        /// Определяет процесс создания конкретного продукта, 
        /// при этом возвращая обобщенный продукт (интерфейс или абстрактный класс продукта).
        /// Благодаря этому появляется возможность обобщенному создателю 
        /// не зависеть от конкретных реализаций продукта и создателя этого продукта.
        /// </summary>
        /// <returns>Конкретный продукт упакованный в виде обобщенного продукта</returns>
        public override IProduct FactoryMethod()
        {
            //При необходимости здесь могут быть дополнительные действия,
            // кроме  непостредственного создания конкретного продукта

            return new ConcreateProduct();
        }
    }
    /// <summary>
    /// Продукт (Обобщенный продукт)
    /// интерфейс или абстрактный класс, который определяет общие для 
    /// всех продуктов свойства и методы (то есть характеристики и действия, которые будут на 100% у всех конкретных продуктов)
    /// при этом при необходимости могут содержать  базовую реализацию  (если это класс).
    /// Данный класс (интерфейс) один и является общим для всех конкретных продуктов.
    /// 
    /// </summary>
    interface IProduct
    {
        string Name { get; set; }
        void DoWork();
    }

    /// <summary>
    /// Продукт (конкретный продукт).
    /// Класс определяющий поведение конкретного продукта. 
    /// Для каждого конкретного продукта  необходим свой собственный конкретный создатель.
    /// Конкретных продуктов может быть много
    /// </summary>
    public class ConcreateProduct : IProduct
    {
        public string Name { get; set; }

        public void DoWork()
        {
            ///
        }
    }
}
